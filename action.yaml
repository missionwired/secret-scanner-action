name: Detect Secrets Scanner
description: Scan files for hardcoded secrets, convert results to SARIF, and optionally upload to GitHub Code Scanning.
inputs:
  scan-path:
    description: Directory to scan for secrets (e.g., ./src) Defaults to repository root.
    required: false
    default: .
  upload-sarif:
    description: Upload SARIF results to GitHub Code Scanning (true/false).
    required: false
    default: 'true'
  exclude-files-regex:
    description: Regex pattern for files to exclude (single pattern).
    required: false
    default: ''
  scan-all-files:
    description: Scan all files including untracked/build artifacts (true/false). Default scans all files.
    required: false
    default: 'true'
  fail-on-detection:
    description: Fail workflow if secrets detected (true/false).
    required: false
    default: 'true'
  debug-mode:
    description: Enable verbose diagnostic logging (true/false).
    required: false
    default: 'false'
  always-upload:
    description: Upload SARIF even if zero findings (true/false).
    required: false
    default: 'false'
  wait-for-processing:
    description: Wait for SARIF ingestion (true/false).
    required: false
    default: 'true'
  checkout-path:
    description: Path repository was checked out to (for path relativization).
    required: false
    default: ${{ github.workspace }}
  detect-secrets-version:
    description: Pin detect-secrets version (e.g., 1.5.0). Blank = latest.
    required: false
    default: ''

runs:
  using: composite
  steps:
    - name: Debug Context
      if: ${{ inputs.debug-mode == 'true' }}
      shell: bash
      run: |
        echo "::group::Debug Context"
        echo "Event: $GITHUB_EVENT_NAME"
        echo "Ref: $GITHUB_REF"
        echo "SHA: $GITHUB_SHA"
        echo "Workspace: $GITHUB_WORKSPACE"
        echo "Scan Path: ${{ inputs.scan-path }}"
        echo "Exclude Regex: ${{ inputs.exclude-files-regex }}"
        echo "Always Upload: ${{ inputs.always-upload }}"
        echo "Wait For Processing: ${{ inputs.wait-for-processing }}"
        echo "::endgroup::"

    - name: Install detect-secrets
      shell: bash
      run: |
        echo "[secret-scan] Install phase"
        set -euo pipefail
        echo "::group::Installing detect-secrets"
        python3 -m pip install --upgrade pip --quiet
        if [[ -n "${{ inputs.detect-secrets-version }}" ]]; then
          pip install "detect-secrets==${{ inputs.detect-secrets-version }}" --quiet
        else
          pip install detect-secrets --quiet
        fi
        echo "::endgroup::"

    - name: Scan for secrets and generate SARIF report
      id: secret-scan
      shell: bash
      env:
        EXCLUDE_REGEX: ${{ inputs.exclude-files-regex }}
        DEBUG_MODE: ${{ inputs.debug-mode }}
      run: |
        echo "[secret-scan] Scan phase"
        set -euo pipefail

        SCAN_CMD=(
          detect-secrets
          scan
          "${{ inputs.scan-path }}"
        )

        # Add --all-files flag if explicitly requested (for build artifacts)
        if [[ "${{ inputs.scan-all-files }}" == "true" ]]; then
          SCAN_CMD+=(--all-files)
          echo "::debug::Scanning all files including untracked/build artifacts"
        else
          echo "::debug::Scanning git-tracked files only"
        fi

        # Disable noisy plugins
        SCAN_CMD+=(--disable-plugin ArtifactoryDetector)
        SCAN_CMD+=(--disable-plugin Base64HighEntropyString)
        SCAN_CMD+=(--disable-plugin HexHighEntropyString)
        SCAN_CMD+=(--disable-plugin KeywordDetector)

        # Build exclude pattern - always exclude .git when scanning all files
        EXCLUDE_PATTERN=""
        if [[ "${{ inputs.scan-all-files }}" == "true" ]]; then
          # Always exclude .git directory when scanning all files to avoid git history
          EXCLUDE_PATTERN="\.git/"
        fi
        if [[ -n "${EXCLUDE_REGEX}" ]]; then
          if [[ -n "${EXCLUDE_PATTERN}" ]]; then
            # Combine git exclusion with user exclusion
            EXCLUDE_PATTERN="${EXCLUDE_PATTERN}|${EXCLUDE_REGEX}"
          else
            EXCLUDE_PATTERN="${EXCLUDE_REGEX}"
          fi
        fi

        if [[ -n "${EXCLUDE_PATTERN}" ]]; then
          SCAN_CMD+=(--exclude-files "${EXCLUDE_PATTERN}")
          echo "::debug::Excluding files matching: ${EXCLUDE_PATTERN}"
        fi

        echo "::group::Scanning for secrets"
        if [[ "${DEBUG_MODE}" == "true" ]]; then
          echo "[secret-scan] Command: ${SCAN_CMD[*]}"
        fi
        "${SCAN_CMD[@]}" > detect-secrets-output.json
        echo "::endgroup::"

        jq \
          --arg repoUri "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}" \
          --arg revision "${GITHUB_SHA}" \
          --arg branch "${GITHUB_REF_NAME}" \
          -f "${{ github.action_path }}/detect-secrets-to-sarif.jq" \
          detect-secrets-output.json > detect-secrets-results.sarif

        # Primary count from raw detect-secrets JSON (handles zero findings robustly)
        # Correctly sum lengths of all result arrays (previous logic only captured last entry)
        SECRET_COUNT=$(jq -r '(.results? // {}) | [ .[] | length ] | add // 0' detect-secrets-output.json 2>/dev/null || echo 0)
        if [[ -z "${SECRET_COUNT}" || "${SECRET_COUNT}" == "null" || ! "${SECRET_COUNT}" =~ ^[0-9]+$ ]]; then
          SECRET_COUNT=0
        fi
        echo "secret_count=${SECRET_COUNT}" >> "${GITHUB_OUTPUT}"
        echo "[secret-scan] Findings: ${SECRET_COUNT}" 

        if [[ "${DEBUG_MODE}" == "true" ]]; then
          SARIF_COUNT=$(jq -r '[ .runs[]? | ( .results? // [] ) | length ] | add // 0' detect-secrets-results.sarif 2>/dev/null || echo 0)
          echo "::group::SARIF Diagnostics"
          echo "Raw Secret Count: ${SECRET_COUNT}"
          echo "SARIF Secret Count: ${SARIF_COUNT}"
          if [[ "${SARIF_COUNT}" != "${SECRET_COUNT}" ]]; then
            echo "::warning::Mismatch between raw and SARIF counts (raw=${SECRET_COUNT}, sarif=${SARIF_COUNT})"
          fi
          head -n 25 detect-secrets-results.sarif || true
          echo "::endgroup::"
        fi

        if [[ "${SECRET_COUNT}" -gt 0 ]]; then
          if [[ "${{ inputs.upload-sarif }}" == "true" ]]; then
            DETAILS_MESSAGE="Check Security â†’ Code scanning alerts (category: detect-secrets)."
          else
            DETAILS_MESSAGE="Review detect-secrets-results.sarif."
          fi
          ERROR_MESSAGE="Found ${SECRET_COUNT} potential hardcoded secret(s). ${DETAILS_MESSAGE}"
          if [[ "${{ inputs.fail-on-detection }}" == "true" ]]; then
            echo "fail_after_upload=true" >> "${GITHUB_OUTPUT}"
            echo "::error title=Secrets Detected::${ERROR_MESSAGE}"
          else
            echo "::warning title=Secrets Detected::${ERROR_MESSAGE}"
          fi
        else
          echo "::notice title=Secret Scan Complete::No hardcoded secrets detected."
        fi

    - name: Upload SARIF to GitHub Code Scanning
      if: ${{ inputs.upload-sarif == 'true' && (inputs.always-upload == 'true' || steps.secret-scan.outputs.secret_count > 0) }}
      uses: github/codeql-action/upload-sarif@v4
      with:
        sarif_file: detect-secrets-results.sarif
        category: detect-secrets
        wait-for-processing: ${{ inputs.wait-for-processing }}
        checkout_path: ${{ inputs.checkout-path }}

    - name: SARIF Artifact (debug only)
      if: ${{ inputs.debug-mode == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: detect-secrets-sarif
        path: detect-secrets-results.sarif
        retention-days: 5

    - name: Fail if secrets were detected
      if: ${{ steps.secret-scan.outputs.fail_after_upload == 'true' }}
      shell: bash
      run: |
        echo "Failing after SARIF upload due to detected secrets."
        exit 1